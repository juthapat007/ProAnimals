// route/users/pets.js
import express from 'express';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'url';
import { requireLogin } from '../../middleware/auth.js';
import { getPoolPromise } from '../../config/db.js'; // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getPoolPromise

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const router = express.Router();

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, '../../public', 'uploads'));
  },
  filename: function (req, file, cb) {
    const ext = path.extname(file.originalname);
    cb(null, Date.now() + ext);
  }
});

const fileFilter = (req, file, cb) => {
  const allowedTypes = /jpeg|jpg|png|gif/;
  const ext = path.extname(file.originalname).toLowerCase();
  const mime = file.mimetype;

  if (allowedTypes.test(ext) && allowedTypes.test(mime)) {
    cb(null, true);
  } else {
    cb(new Error('‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!'), false);
  }
};

const upload = multer({
  storage,
  fileFilter,
  limits: { fileSize: 4 * 1024 * 1024 } // 4MB
});

// ‚úÖ GET /users/select_pet - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
router.get('/select_pet', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô customer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (req.session.access_type !== 'customer') {
      return res.redirect('/');
    }

    const cus_id = req.session.cus_id;
    const cus_name = req.session.user_name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";

    console.log("üêï Loading select_pet for customer:", { cus_id, cus_name });

    const pool = getPoolPromise(req.session.user_email);

    // ‚úÖ ‡πÉ‡∏ä‡πâ async/await ‡πÅ‡∏ó‡∏ô callback
    const [pets] = await pool.query(
      `SELECT p.*, pt.type AS pet_type_name
       FROM pet p
       LEFT JOIN pet_type pt ON p.type_id = pt.type_id
       WHERE p.cus_id = ?
       ORDER BY p.pet_name ASC`,
      [cus_id]
    );

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    const [petTypes] = await pool.query("SELECT * FROM pet_type ORDER BY type ASC");

    console.log(`üìä Found ${pets.length} pets for customer ${cus_id}`);

    res.render('users/select_pet', {
      cus_id,
      cus_name,
      pets: pets || [],
      pet_types: petTypes || [],
      error: null
    });

  } catch (error) {
    console.error('‚ùå Error in select_pet:', error);
    res.status(500).render('users/select_pet', {
      cus_id: req.session.cus_id,
      cus_name: req.session.user_name,
      pets: [],
      pet_types: [],
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á'
    });
  }
});

// ‚úÖ GET /users/insert_pet - ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
router.get('/insert_pet', requireLogin, async (req, res) => {
  try {
    if (req.session.access_type !== 'customer') {
      return res.redirect('/');
    }

    const pool = getPoolPromise(req.session.user_email);
    const [petTypes] = await pool.query('SELECT * FROM pet_type ORDER BY type ASC');

    res.render('users/insert_pet', { 
      pet_types: petTypes,
      cus_id: req.session.cus_id,
      cus_name: req.session.user_name
    });

  } catch (error) {
    console.error('‚ùå Error loading insert_pet:', error);
    res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á');
  }
});

// ‚úÖ POST /users/insert_pet - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
router.post('/insert_pet', requireLogin, upload.single('pet_img'), async (req, res) => {
  try {
    if (req.session.access_type !== 'customer') {
      return res.status(403).send('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
    }

    const pool = getPoolPromise(req.session.user_email);
    const { pet_name, pet_gender, type_id } = req.body;
    const cus_id = req.session.cus_id;

    console.log("üìù Insert pet data:", { pet_name, pet_gender, type_id, cus_id, hasFile: !!req.file });

    if (!pet_name || !pet_gender || !type_id || !req.file) {
      return res.status(400).send('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
    }

    const img = req.file.filename;

    await pool.query(
      `INSERT INTO pet (pet_name, pet_gender, type_id, cus_id, img) 
       VALUES (?, ?, ?, ?, ?)`,
      [pet_name, pet_gender, type_id, cus_id, img]
    );

    console.log("‚úÖ Pet inserted successfully");
    res.redirect('/users/select_pet');

  } catch (error) {
    console.error('‚ùå Error inserting pet:', error);
    res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  }
});

// ‚úÖ GET /users/edit_pet - ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
router.get('/edit_pet', requireLogin, async (req, res) => {
  try {
    if (req.session.access_type !== 'customer') {
      return res.redirect('/');
    }

    const pet_id = req.query.pet_id;

    if (!pet_id) {
      return res.status(400).send("‡πÑ‡∏°‡πà‡∏û‡∏ö pet_id");
    }

    const pool = getPoolPromise(req.session.user_email);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [petResults] = await pool.query(
      "SELECT * FROM pet WHERE pet_id = ? AND cus_id = ?",
      [pet_id, req.session.cus_id]
    );

    if (petResults.length === 0) {
      return res.status(404).send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á");
    }

    const pet = petResults[0];

    const [petTypes] = await pool.query("SELECT * FROM pet_type ORDER BY type ASC");

    res.render("users/edit_pet", {
      pet,
      pet_types: petTypes,
      cus_id: req.session.cus_id,
      cus_name: req.session.user_name
    });

  } catch (error) {
    console.error("‚ùå Error loading edit_pet:", error);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á");
  }
});

// ‚úÖ POST /users/update_pet - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
router.post('/update_pet', requireLogin, upload.single('pet_img'), async (req, res) => {
  try {
    if (req.session.access_type !== 'customer') {
      return res.status(403).send('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
    }

    console.log("üìù Update pet - BODY:", req.body);
    console.log("üìù Update pet - FILE:", req.file);

    const { pet_id, pet_name, type_id, pet_gender } = req.body;

    if (!pet_id || !pet_name || !type_id || !pet_gender) {
      return res.status(400).send("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ñ‡πà‡∏∞");
    }

    const pool = getPoolPromise(req.session.user_email);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [checkPet] = await pool.query(
      "SELECT pet_id FROM pet WHERE pet_id = ? AND cus_id = ?",
      [pet_id, req.session.cus_id]
    );

    if (checkPet.length === 0) {
      return res.status(403).send("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ô‡∏µ‡πâ");
    }

    let sql, params;

    if (req.file) {
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
      sql = `UPDATE pet 
             SET pet_name = ?, type_id = ?, pet_gender = ?, img = ?
             WHERE pet_id = ? AND cus_id = ?`;
      params = [pet_name, type_id, pet_gender, req.file.filename, pet_id, req.session.cus_id];
    } else {
      // ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
      sql = `UPDATE pet 
             SET pet_name = ?, type_id = ?, pet_gender = ?
             WHERE pet_id = ? AND cus_id = ?`;
      params = [pet_name, type_id, pet_gender, pet_id, req.session.cus_id];
    }

    await pool.query(sql, params);

    console.log("‚úÖ Pet updated successfully");
    res.redirect('/users/select_pet');

  } catch (error) {
    console.error("‚ùå Error updating pet:", error);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Ñ‡πà‡∏∞");
  }
});

// ‚úÖ DELETE /users/delete_pet - ‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
router.post('/delete_pet', requireLogin, async (req, res) => {
  try {
    if (req.session.access_type !== 'customer') {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const { pet_id } = req.body;

    if (!pet_id) {
      return res.status(400).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö pet_id' });
    }

    const pool = getPoolPromise(req.session.user_email);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    const [checkPet] = await pool.query(
      "SELECT pet_id FROM pet WHERE pet_id = ? AND cus_id = ?",
      [pet_id, req.session.cus_id]
    );

    if (checkPet.length === 0) {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ô‡∏µ‡πâ' });
    }

    await pool.query("DELETE FROM pet WHERE pet_id = ? AND cus_id = ?", [pet_id, req.session.cus_id]);

    console.log("‚úÖ Pet deleted successfully");
    res.json({ success: true, message: '‡∏•‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (error) {
    console.error("‚ùå Error deleting pet:", error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
  }
});

export default router;
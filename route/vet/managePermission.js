import express from "express";
import { getPoolPromise } from "../../config/db.js"; // ‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
import { requireLogin } from "../../middleware/auth.js"; // ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login

const router = express.Router();

// ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
router.get("/", requireLogin, async (req, res) => {
  try {
    const pool = getPoolPromise(req.session.user_email);
    const [permissions] = await pool.query(`
      SELECT p.count_users, p.access_email, p.access_type, c.cus_name, c.cus_phon
      FROM permission p
      LEFT JOIN customer c ON p.access_email = c.cus_email
      WHERE access_type = 'customer';
    `);

    res.render("veterinarian/mg_permission", {
      permissions, // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ ejs
      user: req.session, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏ä‡∏∑‡πà‡∏≠
        vetId: req.session.vet_id  // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πá‡∏ö vet_id ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session
    });
  } catch (err) {
    console.error("‚ùå Error fetching permissions:", err);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå");
  }
});

// üìå ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
// POST /update/:id
router.post("/update/:id", requireLogin, async (req, res) => {
  try {
    const { id } = req.params;
    const { access_type } = req.body;

    const pool = getPoolPromise(req.session.user_email);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const [rows] = await pool.query(
      `SELECT p.access_email, p.access_pwd, c.cus_name, c.cus_phon
       FROM permission p
       LEFT JOIN customer c ON p.access_email = c.cus_email
       WHERE p.count_users = ?`,
      [id]
    );

    if (rows.length === 0) return res.status(404).send("User not found");

    const user = rows[0];

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó access_type ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á permission
    await pool.query(
      "UPDATE permission SET access_type = ? WHERE count_users = ?",
      [access_type, id]
    );

    // ‡∏ñ‡πâ‡∏≤ access_type ‡πÄ‡∏õ‡πá‡∏ô admin
    if (access_type === "admin") {
      const [existingAdmin] = await pool.query(
        "SELECT admin_email FROM admin WHERE admin_email = ?",
        [user.access_email]
      );
      if (existingAdmin.length === 0) {
        await pool.query(
          `INSERT INTO admin (admin_email, admin_name, admin_phon)
           VALUES (?, ?, ?)`,
          [user.access_email, user.cus_name, user.cus_phon]
        );
      }
    }

    // ‡∏ñ‡πâ‡∏≤ access_type ‡πÄ‡∏õ‡πá‡∏ô veterinarian
    if (access_type === "veterinarian") {
      const [existingVet] = await pool.query(
        "SELECT vet_email FROM veterinarian WHERE vet_email = ?",
        [user.access_email]
      );
      if (existingVet.length === 0) {
        const [last] = await pool.query("SELECT vet_id FROM veterinarian ORDER BY vet_id DESC LIMIT 1");

    let newId = "VET001"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
    if (last.length > 0) {
      const lastId = last[0].medication_id; // ‡πÄ‡∏ä‡πà‡∏ô M005
      const num = parseInt(lastId.replace("VET", "")) + 1; // 5+1 = 6
      newId = "VET" + num.toString().padStart(2, "0"); // ‡πÑ‡∏î‡πâ M006
    }
        await pool.query(
          `INSERT INTO veterinarian (vet_id, vet_name, vet_email, vet_phon)
           VALUES (?, ?, ?, ?)`,
          [newId, user.cus_name, user.access_email, user.cus_phon]
        );
      }
    }

    res.render("veterinarian/mg_permission", {
  permissions,
  user: req.session,
  vetId: req.session.vet_id  // ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πá‡∏ö vet_id ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session
});

  } catch (err) {
    console.error("‚ùå Update permission error:", err);
    res.status(500).send("Database Error: " + err.message);
  }
});


export default router;
// router/veterinarian/work_days.js
import express from "express";
import { getPoolPromise } from "../../config/db.js";
import { requireLogin } from "../../middleware/auth.js";

const router = express.Router();

// üëâ render ‡∏´‡∏ô‡πâ‡∏≤ work_days ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô
router.get("/", requireLogin, async (req, res) => {
  const { vet_id } = req.query;

  if (!vet_id) {
    return res.status(400).send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ vet_id");
  }

  try {
    const pool = getPoolPromise(req.session.user_email);

    // ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á vet ‡∏à‡∏≤‡∏Å table vet_work
    const [schedule] = await pool.query(
      `SELECT work_id, work_day, start_time, end_time 
       FROM vet_work 
       WHERE vet_id = ? 
       ORDER BY work_day ASC`,
      [vet_id]
    );

    // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á vet ‡∏ô‡∏µ‡πâ
    const [usedDates] = await pool.query(
      `SELECT DATE_FORMAT(work_day, '%Y-%m-%d') as formatted_date FROM vet_work WHERE vet_id = ?`,
      [vet_id]
    );

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Flatpickr
    const disabledDates = usedDates.map(row => row.formatted_date);

    console.log("Schedule for", vet_id, schedule); // Debug
    console.log("Disabled dates:", disabledDates); // Debug

    res.render("veterinarian/work_days", {
      vetId: vet_id,   // map ‡πÄ‡∏õ‡πá‡∏ô vetId
      schedule,
      disabledDates: JSON.stringify(disabledDates) // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON string
    });

  } catch (err) {
    console.error("‚ùå Work days error:", err);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
router.post("/add", async (req, res) => {
  try {
    const { vet_id, work_dates, start_time, end_time } = req.body;
    const pool = await getPoolPromise();

    // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å string
    const dates = work_dates.split(",").map(d => d.trim());

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    const duplicateDates = [];

    for (let date of dates) {
      // ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á vet_work ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vet_id ‡∏ô‡∏µ‡πâ
      const [existing] = await pool.query(
        "SELECT * FROM vet_work WHERE work_day = ? AND vet_id = ?",
        [date, vet_id]
      );

      if (existing.length > 0) {
        duplicateDates.push(date); // ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ã‡πâ‡∏≥
        continue; // ‡∏Ç‡πâ‡∏≤‡∏° insert
      }

      // insert ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
      await pool.query(
        "INSERT INTO vet_work (vet_id, work_day, start_time, end_time) VALUES (?, ?, ?, ?)",
        [vet_id, date, start_time, end_time]
      );
    }

    // ‡∏™‡πà‡∏á alert ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
    if (duplicateDates.length > 0) {
      // ‡πÅ‡∏õ‡∏•‡∏á array ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏ö‡∏ö readable
      const dupStr = duplicateDates.join(", ");
      res.send(`<script>alert('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${dupStr} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ'); window.location.href='/veterinarian/work_days?vet_id=${vet_id}';</script>`);
    } else {
      res.redirect(`/veterinarian/work_days?vet_id=${vet_id}`);
    }

  } catch (err) {
    console.error(err);
    res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô");
  }
});

// ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
router.get('/delete/:work_id', async (req, res) => {
  const workId = req.params.work_id;

  try {
    const pool = await getPoolPromise();
    const [result] = await pool.query(
      'DELETE FROM vet_work WHERE work_id = ?',
      [workId]
    );

    // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    res.redirect('/veterinarian/work_days?vet_id=' + req.query.vet_id);
  } catch (err) {
    console.error(err);
    res.status(500).send('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  }
});


// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤
router.post("/update/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { start_time, end_time } = req.body;
    const pool = getPoolPromise(req.session.user_email);

    await pool.query(
      "UPDATE vet_work SET start_time = ?, end_time = ? WHERE work_id = ?",
      [start_time, end_time, id]
    );

    res.sendStatus(200);
  } catch (err) {
    console.error(err);
    res.status(500).send("Error updating workday");
  }
});

export default router;
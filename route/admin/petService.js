import express from 'express';
import dayjs from 'dayjs';
import { requireLogin } from '../../middleware/auth.js';
import { getPoolPromise } from '../../config/db.js';

const router = express.Router();

// ‚úÖ GET /admin/pet_service - ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
router.get('/', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      return res.redirect('/');
    }

    const { pet_id, cus_id } = req.query;

    if (!pet_id || !cus_id) {
      return res.redirect('/admin/customers');
    }

    const userEmail = req.session?.user_email || 'wun@example.com';
    const pool = getPoolPromise(userEmail);

    try {
      // 1) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      const [customerRows] = await pool.query(
        'SELECT cus_id, cus_name, cus_email, cus_phon FROM customer WHERE cus_id = ?',
        [cus_id]
      );

      if (customerRows.length === 0) {
        return res.status(404).send('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
      }

      // 2) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á
      const [petRows] = await pool.query(
        `SELECT p.pet_id, p.pet_name, p.pet_gender, p.img, pt.type AS pet_type_name
         FROM pet p
         LEFT JOIN pet_type pt ON p.type_id = pt.type_id
         WHERE p.pet_id = ? AND p.cus_id = ?`,
        [pet_id, cus_id]
      );

      if (petRows.length === 0) {
        return res.status(404).send('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á');
      }

      // 3) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const [serviceRows] = await pool.query(
        `SELECT service_id, service_type, service_price 
         FROM service_type 
         ORDER BY service_id ASC`
      );

      // 4) ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
      const [bookingHistory] = await pool.query(
        `SELECT 
            b.booking_id, 
            b.booking_date, 
            b.time_booking, 
            b.status, 
            s.service_type, 
            s.service_price,
            v.vet_name
        FROM booking b
        LEFT JOIN service_type s ON b.service_id = s.service_id
        LEFT JOIN veterinarian v ON b.vet_id = v.vet_id
        WHERE b.pet_id = ?
        ORDER BY b.booking_date DESC, b.time_booking DESC
        LIMIT 10`,
        [pet_id]
      );

      console.log('‚úÖ Pet service data loaded successfully');

      res.render('admin/pet_service', {
        customer: customerRows[0],
        pet: petRows[0],
        services: serviceRows,
        bookingHistory,
        today: new Date().toISOString().slice(0, 10),
        error: req.query.error || null,
        success: req.query.success || null
      });

    } catch (dbError) {
      console.error('‚ùå Database error in pet-service:', dbError);
      res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }

  } catch (error) {
    console.error('‚ùå Error in pet-service GET:', error);
    res.status(500).send('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
  }
});

// ‚úÖ POST /admin/pet_service - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
router.post('/', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      return res.redirect('/');
    }

    const { pet_id, cus_id, service_id, date, time, note } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!pet_id || !cus_id || !service_id || !date || !time) {
      return res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&error=missing_data`);
    }

    const userEmail = req.session?.user_email || 'wun@example.com';
    const pool = getPoolPromise(userEmail);

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      const [petCheck] = await pool.query(
        'SELECT pet_name FROM pet WHERE pet_id = ? AND cus_id = ?',
        [pet_id, cus_id]
      );

      if (petCheck.length === 0) {
        return res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&error=pet_not_found`);
      }

      // ‚úÖ ‡∏´‡∏≤ vet_id ‡∏ó‡∏µ‡πà available ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const [availableVets] = await pool.query(
        `SELECT DISTINCT vw.vet_id 
         FROM vet_work vw
         WHERE vw.work_day = ? 
         AND vw.start_time <= ? 
         AND vw.end_time >= ?
         ORDER BY vw.vet_id ASC
         LIMIT 1`,
        [date, time, time]
      );

      let vet_id = null;
      
      if (availableVets.length > 0) {
        vet_id = availableVets[0].vet_id;
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ vet available ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ vet_id ‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (fallback)
        const [firstVet] = await pool.query(
          `SELECT vet_id FROM veterinarian ORDER BY vet_id ASC LIMIT 1`
        );
        
        if (firstVet.length > 0) {
          vet_id = firstVet[0].vet_id;
        } else {
          return res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&error=no_vet_available`);
        }
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [timeConflict] = await pool.query(
        `SELECT booking_id FROM booking 
         WHERE booking_date = ? AND time_booking = ? 
         AND status IN ('‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤')`,
        [date, time]
      );

      if (timeConflict.length > 0) {
        return res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&error=time_conflict`);
      }

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì end_time ‡∏à‡∏≤‡∏Å service_time
      const [serviceTime] = await pool.query(
        `SELECT service_time FROM service_type WHERE service_id = ?`,
        [service_id]
      );

      let end_time = null;
      if (serviceTime.length > 0) {
        // ‡πÅ‡∏õ‡∏•‡∏á TIME ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô time_booking
        const serviceMinutes = serviceTime[0].service_time;
        const [hours, minutes] = serviceMinutes.split(':').map(Number);
        const serviceDuration = hours * 60 + minutes;
        
        const [timeHours, timeMinutes] = time.split(':').map(Number);
        const startMinutes = timeHours * 60 + timeMinutes;
        const endMinutes = startMinutes + serviceDuration;
        
        const endHours = Math.floor(endMinutes / 60);
        const endMins = endMinutes % 60;
        end_time = `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}:00`;
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° vet_id ‡πÅ‡∏•‡∏∞ end_time
      const [result] = await pool.query(
        `INSERT INTO booking (time_booking, end_time, service_id, cus_id, pet_id, vet_id, booking_date, status, customer_type)
         VALUES (?, ?, ?, ?, ?, ?, ?, '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', 'Booking')`,
        [time, end_time, service_id, cus_id, pet_id, vet_id, date]
      );

      const bookingId = result.insertId;
      console.log(`‚úÖ Created new booking: ${bookingId} for pet ${petCheck[0].pet_name} with vet ${vet_id}`);

      res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&success=booking_created&booking_id=${bookingId}`);

    } catch (dbError) {
      console.error('‚ùå Database error in pet-service POST:', dbError);
      res.redirect(`/admin/pet_service?pet_id=${pet_id}&cus_id=${cus_id}&error=database_error`);
    }

  } catch (error) {
    console.error('‚ùå Error in pet-service POST:', error);
    res.redirect(`/admin/pet_service?pet_id=${req.body.pet_id}&cus_id=${req.body.cus_id}&error=system_error`);
  }
});

// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà)
// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢)
router.get('/api/available-dates', requireLogin, async (req, res) => {
  try {
    console.log('üì° API: /api/available-dates called');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      console.log('‚ùå Unauthorized access attempt');
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const userEmail = req.session?.user_email || 'wun@example.com';
    console.log('üë§ User email:', userEmail);

    const pool = getPoolPromise(userEmail);

    // ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å vet_work
    const [rows] = await pool.query(
      `SELECT DISTINCT work_day 
       FROM vet_work 
       WHERE work_day >= CURDATE() 
       ORDER BY work_day ASC
       LIMIT 30`
    );

    console.log('üìä Raw database result:', rows);

    if (!rows || rows.length === 0) {
      console.log('‚ö†Ô∏è No work days found in database');
      return res.json({
        success: true,
        availableDates: [],
        count: 0,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
      });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á work_day ‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
    const availableDates = rows
      .map(row => dayjs(row.work_day).format('YYYY-MM-DD'))
      .filter(dateStr => /^\d{4}-\d{2}-\d{2}$/.test(dateStr));

    console.log('‚úÖ Processed available dates:', availableDates);

    res.json({
      success: true,
      availableDates,
      count: availableDates.length,
      message: `‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ${availableDates.length} ‡∏ß‡∏±‡∏ô`
    });

  } catch (error) {
    console.error('‚ùå Error in /api/available-dates:', error);

    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});


// ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
router.get('/api/available-times', requireLogin, async (req, res) => {
  try {
    console.log('üì° API: available-times called with params:', req.query);
    
    if (req.session.access_type !== 'admin') {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const { date, service_id } = req.query;

    if (!date || !service_id) {
      console.log('‚ö†Ô∏è Missing required parameters:', { date, service_id });
      return res.status(400).json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ date ‡πÅ‡∏•‡∏∞ service_id' });
    }

    const userEmail = req.session?.user_email || 'wun@example.com';
    const pool = getPoolPromise(userEmail);

    // 1) ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    const [serviceRows] = await pool.query(
      `SELECT service_time FROM service_type WHERE service_id = ?`,
      [service_id]
    );

    if (serviceRows.length === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' });
    }

    const serviceTime = serviceRows[0].service_time;
    console.log('‚è±Ô∏è Service time:', serviceTime);
    
    const [hours, minutes] = serviceTime.split(':').map(Number);
    const serviceDurationMinutes = hours * 60 + minutes;

    // 2) ‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const [vetWorkRows] = await pool.query(
      `SELECT DISTINCT start_time, end_time 
       FROM vet_work 
       WHERE work_day = ?
       ORDER BY start_time ASC`,
      [date]
    );

    console.log('üë®‚Äç‚öïÔ∏è Vet work hours for', date, ':', vetWorkRows);

    if (vetWorkRows.length === 0) {
      return res.json({
        success: true,
        availableSlots: [],
        bookedSlots: [],
        allSlots: [],
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
      });
    }

    // 3) ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const [existingBookings] = await pool.query(
      `SELECT b.time_booking, b.end_time, st.service_time
       FROM booking b
       JOIN service_type st ON b.service_id = st.service_id
       WHERE b.booking_date = ? AND b.status IN ('‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤')
       ORDER BY b.time_booking ASC`,
      [date]
    );

    console.log('üìã Existing bookings for', date, ':', existingBookings);

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á time slots ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πÅ‡∏û‡∏ó‡∏¢‡πå
    const generateTimeSlots = (startTime, endTime) => {
      const slots = [];
      const [startHours, startMinutes] = startTime.split(':').map(Number);
      const [endHours, endMinutes] = endTime.split(':').map(Number);
      
      const startTotalMinutes = startHours * 60 + startMinutes;
      const endTotalMinutes = endHours * 60 + endMinutes;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á slots ‡∏ó‡∏∏‡∏Å 60 ‡∏ô‡∏≤‡∏ó‡∏µ
      for (let current = startTotalMinutes; current + serviceDurationMinutes <= endTotalMinutes; current += 60) {
        const hours = Math.floor(current / 60);
        const minutes = current % 60;
        const timeString = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
        slots.push(timeString);
      }
      return slots;
    };

    // ‡∏£‡∏ß‡∏° slots ‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let allSlots = [];
    vetWorkRows.forEach(work => {
      const slots = generateTimeSlots(work.start_time, work.end_time);
      allSlots = [...allSlots, ...slots];
    });
    
    // ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    allSlots = [...new Set(allSlots)].sort();
    
    console.log('‚è∞ All possible time slots:', allSlots);

    // 5) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ slot
    const availableSlots = [];
    const bookedSlots = [];

    for (const slot of allSlots) {
      const [slotHours, slotMinutes] = slot.split(':').map(Number);
      const slotStartMinutes = slotHours * 60 + slotMinutes;
      const slotEndMinutes = slotStartMinutes + serviceDurationMinutes;
      
      let isAvailable = true;

      for (const booking of existingBookings) {
        const [bookingHours, bookingMinutes] = booking.time_booking.split(':').map(Number);
        const bookingStartMinutes = bookingHours * 60 + bookingMinutes;
        
        let bookingEndMinutes;
        if (booking.end_time) {
          const [endHours, endMins] = booking.end_time.split(':').map(Number);
          bookingEndMinutes = endHours * 60 + endMins;
        } else {
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å service_time
          const [serviceHours, serviceMins] = booking.service_time.split(':').map(Number);
          bookingEndMinutes = bookingStartMinutes + (serviceHours * 60 + serviceMins);
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        if (slotStartMinutes < bookingEndMinutes && bookingStartMinutes < slotEndMinutes) {
          isAvailable = false;
          break;
        }
      }

      if (isAvailable) {
        availableSlots.push(slot);
      } else {
        bookedSlots.push(slot);
      }
    }

    console.log('‚úÖ Available slots:', availableSlots);
    console.log('‚ùå Booked slots:', bookedSlots);

    res.json({
      success: true,
      availableSlots,
      bookedSlots,
      allSlots,
      serviceDurationMinutes,
      vetWorkHours: vetWorkRows,
      message: `‡∏û‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á ${availableSlots.length} ‡∏ä‡πà‡∏ß‡∏á ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allSlots.length} ‡∏ä‡πà‡∏ß‡∏á`
    });

  } catch (error) {
    console.error('‚ùå Error in /api/available-times:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤',
      error: error.message
    });
  }
});




// ‚úÖ PUT - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put('/booking/:booking_id/status', requireLogin, async (req, res) => {
  try {
    if (req.session.access_type !== 'admin') {
      return res.status(403).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' });
    }

    const bookingId = req.params.booking_id;
    const { status } = req.body;

    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const validStatuses = ['‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'];
    
    if (!status || !validStatuses.includes(status)) {
      return res.status(400).json({ success: false, message: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const userEmail = req.session?.user_email || 'wun@example.com';
    const pool = getPoolPromise(userEmail);

    const [result] = await pool.query(
      'UPDATE booking SET status = ? WHERE booking_id = ?',
      [status, bookingId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' });
    }

    console.log(`‚úÖ Updated booking ${bookingId} status to ${status}`);

    res.json({
      success: true,
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${status} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    });

  } catch (error) {
    console.error('‚ùå Error updating booking status:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
    });
  }
});

export default router;
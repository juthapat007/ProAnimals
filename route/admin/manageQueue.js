//route/admin/manageQueue.js
import express from 'express';
import moment from 'moment';
import { getPoolPromise } from '../../config/db.js'; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ getPoolPromise ‡πÅ‡∏ó‡∏ô getPool
import { requireLogin } from '../../middleware/auth.js';

const router = express.Router();

// ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß
router.get('/', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      return res.status(403).render('error', {
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ'
      });
    }

    const pool = getPoolPromise(req.session.user_email);
    const selectedDate = req.query.date || moment().format('YYYY-MM-DD');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if (!moment(selectedDate, 'YYYY-MM-DD', true).isValid()) {
      return res.status(400).render('error', {
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const bookings = await getBookingsByDate(pool, selectedDate);
    
    // 2. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    const statusOptions = await getStatusOptions(pool);
    
    console.log("üìä Rendering mg_queue with:", {
      bookingsCount: bookings.length,
      selectedDate,
      statusOptionsCount: statusOptions.length
    });
    
    res.render('admin/mg_queue', {
      data: bookings,
      booking: bookings, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
      selectedDate,
      statusOptions,
      moment,
      user_name: req.session.user_name
    });
  } catch (error) {
    console.error('Error in mg_queue route:', error);
    res.status(500).render('error', { 
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      error: process.env.NODE_ENV === 'development' ? error : {}
    });
  }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
router.post('/update-status', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      return res.status(403).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
      });
    }

    const { booking_id, status } = req.body;
    const pool = getPoolPromise(req.session.user_email);

    console.log("üìù Update request:", { booking_id, status });

    if (!booking_id || !status) {
      return res.status(400).json({ 
        success: false, 
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
      });
    }

    await updateBookingStatus(pool, booking_id, status);
    
    console.log("‚úÖ Status updated successfully");
    
    res.json({ 
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      booking_id,
      new_status: status
    });
  } catch (error) {
    console.error('Update status error:', error);
    res.status(500).json({ 
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ' + error.message
    });
  }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.post('/update', requireLogin, async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    if (req.session.access_type !== 'admin') {
      return res.status(403).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
      });
    }

    const pool = getPoolPromise(req.session.user_email);
    const { booking_id, booking_date, time_booking, status } = req.body;

    console.log("üìù Full update request:", req.body);

    if (!booking_id) {
      return res.status(400).json({ 
        success: false, 
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ booking_id' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÅ‡∏ö‡∏ö dynamic
    let updateFields = [];
    let updateValues = [];
    
    if (booking_date) {
      updateFields.push('booking_date = ?');
      updateValues.push(booking_date);
    }
    
    if (time_booking) {
      updateFields.push('time_booking = ?');
      updateValues.push(time_booking);
    }
    
    if (status) {
      updateFields.push('status = ?');
      updateValues.push(status);
    }
    
    if (updateFields.length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' 
      });
    }
    
    updateValues.push(booking_id); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WHERE clause
    
    const updateSql = `
      UPDATE booking
      SET ${updateFields.join(', ')}
      WHERE booking_id = ?
    `;
    
    const [result] = await pool.query(updateSql, updateValues);
    
    if (result.affectedRows === 0) {
      return res.status(404).json({ 
        success: false, 
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï' 
      });
    }
    
    console.log('‚úÖ Full update successful:', result);
    res.json({ 
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.error('‚ùå Full update error:', error);
    res.status(500).json({ 
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message
    });
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
async function getBookingsByDate(pool, date) {
  const sql = `
    SELECT 
    booking.booking_id,
    booking.time_booking,
    booking.booking_date,
    booking.service_id,
    booking.status,
    pet.pet_name,
    customer.cus_email,
    customer.cus_name,
    customer.cus_phon,
    treatment_history.pay_status
FROM booking
INNER JOIN customer ON booking.cus_id = customer.cus_id
INNER JOIN pet ON booking.pet_id = pet.pet_id
LEFT JOIN treatment_history ON booking.booking_id = treatment_history.booking_id
    WHERE DATE(booking.booking_date) = ?
    ORDER BY booking.time_booking ASC;
  `;
  
  try {
    const [results] = await pool.query(sql, [date]);
    console.log(`üìÖ Found ${results.length} bookings for date: ${date}`);
    return results;
  } catch (error) {
    console.error('‚ùå Error fetching bookings:', error);
    throw error;
  }
}

async function getStatusOptions(pool) {
  try {
    const [enumResults] = await pool.query(
      `SHOW COLUMNS FROM booking LIKE 'status'`
    );
    
    if (enumResults.length > 0) {
      const statusOptions = enumResults[0].Type
        .replace(/^enum\(|\)$/g, '')
        .split(',')
        .map(v => v.replace(/'/g, '').trim());
      
      console.log("üìã Status options:", statusOptions);
      return statusOptions;
    } else {
      console.log("‚ö†Ô∏è Using default status options");
      return ['‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'];
    }
  } catch (error) {
    console.error('‚ùå Error fetching status options:', error);
    return ['‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤', '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'];
  }
}

async function updateBookingStatus(pool, booking_id, status) {
  const sql = 'UPDATE booking SET status = ? WHERE booking_id = ?';
  const [result] = await pool.query(sql, [status, booking_id]);
  
  if (result.affectedRows === 0) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï');
  }
  
  return result;
}

export default router;